name: Rust CI/CD

permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
    paths-ignore:
      - '.github/**'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
        default: ''

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Cache Cargo Registry and Build Artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Project
        run: cargo build --verbose --release

      - name: Run Tests
        run: cargo test --verbose --release

  create_release:
    name: Create Release
    needs: build_and_test
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.set_tag.outputs.tag_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Tag Name
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
            echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG="${{ github.ref }}"
            TAG="${TAG#refs/tags/}"
            echo "TAG_NAME=${TAG}" >> $GITHUB_ENV
            echo "tag_name=${TAG}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=unknown" >> $GITHUB_ENV
            echo "tag_name=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_tag.outputs.tag_name }}
          release_name: Release ${{ steps.set_tag.outputs.tag_name }}
          draft: false
          prerelease: false

  cross_compile:
    name: Cross-compile
    needs: create_release
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
          override: true

      - name: Install Dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install OpenSSL on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install openssl
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV

      - name: Install GitHub CLI
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y gh
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install gh
          fi

      - name: Install Cross (Ubuntu Only)
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross

      - name: Build Project
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            # For macOS targets, use cargo build directly
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Verify GitHub CLI Installation
        run: |
          if ! command -v gh &> /dev/null; then
            if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
              sudo apt-get install -y gh
            elif [ "${{ matrix.os }}" = "macos-latest" ]; then
              brew install gh
            fi
          fi

      - name: Package and Upload Binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_release.outputs.tag_name }}
        run: |
          # Install jq if not already installed
          if ! command -v jq &> /dev/null; then
            if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
              sudo apt-get install -y jq
            elif [ "${{ matrix.os }}" = "macos-latest" ]; then
              brew install jq
            fi
          fi

          # Extract binary names from Cargo metadata
          binaries=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].targets[] | select(.kind[] | contains("bin")) | .name')

          for binary in $binaries; do
            src="target/${{ matrix.target }}/release/${binary}"
            if [ -f "${src}" ]; then
              dst="${binary}-${{ matrix.target }}.tar.gz"
              tar czvf "${dst}" -C "$(dirname "${src}")" "$(basename "${src}")"
              asset_path="${dst}"
              content_type="application/gzip"
              
              echo "Uploading ${dst} to release ${TAG_NAME}"
              
              gh release upload "${TAG_NAME}" "${asset_path}" --clobber
            else
              echo "Warning: Binary '${binary}' not found at '${src}'. Skipping."
            fi
          done
        shell: bash
